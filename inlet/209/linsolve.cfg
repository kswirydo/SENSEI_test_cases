//General solver options
global_options:
{
  //Sparse matrix format ("csr", "jad", "dia")
  mattype  = "jad";

  //Preconditioner (see note*)
  prectype = "ilut";

  //Solver ("gmres", "cg")
  solver   = "gmres";

  //tolerance for stopping iterations
  tol      = 1.0e-6;

  //maximum number of iterations
  maxits   = 20;

  //Krylov subspace dimension (used for gmres)
  kdim     = 20;

  //L/U solve on CPU or GPU ("cpu", "gpu") (see note**)
  lusol    = "cpu";

  //Reorder ("rcm", "mmd", "nd", "none")
  reord    = "none";

  //diagonal scaling("none", "type-0", "type-1") (see note***)
  diag_s   = "none";
};


//Options for specific preconditioners (see note* for descriptions)
prec_options:
{
  ilut:
  {
    lfil = 20;
    tol  = 0.01;
  };
  
  iluk:
  {
    k = 2;
  };
  
  ic:
  {
    lfil    = 100;
    tol     = 0.1;
    //modified ic ("yes" or "no")
    mod_ic  = "yes";
  };
  
  lspoly:
  {
    deg     = 50;
    lanstep = 20;
  };
  
  biluk:
  {
    k   = 2;
    bn  = 16;
    //domain decomp by metis ("yes" or "no")
    dd  = "yes";
  };
  
  bilut:
  {
    lfil = 100;
    tol  = 0.1;
    bn   = 16;
    //domain decomp by metis ("yes" or "no")
    dd   = "yes";
  };

  mcsor:
  {
    k        = 5;
    sparsify = "yes";
    tol      = 0.1;
  };

  mcilu0:
  {
    sparsify = "yes";
    tol      = 0.1;
  };
};


//NOTES: Copied from the CUDA_ITSOL config file.
/*
NOTES
=========================================================
note*: input preconditioner type in the following format:
  ilut lfil tol
    -- lfil: max number of entries in each row of L/U
    -- tol: drop tol
    -- e.g., ilut 100 0.1
  iluk k
    -- k is the level of fill
    -- e.g., iluk 2
  ic lfil tol yes/no (modified ic)
    -- e.g., ic 100 0.1 yes
  lspoly deg lanstep
    -- deg is the polynomial degree
    -- lanstep: num of lanczos step
    -- e.g., lspoly 50 20
  biluk k bn dd/no-dd
    -- bn is the number of blocks
    -- dd : domain decomposition (by metis)
    -- e.g., biluk 2 16 dd
  bilut lfil tol bn dd/no-dd
    -- e.g., bilut 100 0.1 16 dd
  mcsor k yes/no (sparsify) tol
    -- k   : number of ssor iter
    -- tol : drop tol for sparsification
    -- e.g., mcsor 5 yes 0.1; mcsor 5 no
  mcilu0 yes/no (sparsify) tol
    -- tol: drop tol for sparsification
    -- e.g., mcilu0 yes 0.1; mcsor no
  noprec
    -- non-preconditioning
    -- e.g., noprec

=============================================
note**: 
  if L/U sol on GPU, level-scheduling is used

=============================================
note***:
  diag scaling type-0: 
    1. A:=|D|^{-1/2}*A*|D|^{-1/2}
---------------------------------------------
  diag scaling type-1: 
    1. scale A(i,:) s.t ||A(i,:)||_2 = 1.0
    2. scale A(:,i) s.t ||A(:,i)||_2 = 1.0
*/
